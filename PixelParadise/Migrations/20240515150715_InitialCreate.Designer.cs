// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PixelParadise.Data;

#nullable disable

namespace PixelParadise.Migrations
{
    [DbContext(typeof(PixelParadiseDbContext))]
    [Migration("20240515150715_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Friends", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FriendsId")
                        .HasColumnType("integer");

                    b.Property<string>("FriendsName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FriendsId");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1238255-da4c-437e-a564-658166f68140",
                            Email = "cado.54@yahoo.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEAqk5RxbLTyMuSCc1tQlINJfStf+/UpSlQSPfBGRiaAw0InStUA4CqRmf1Am+52zkA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ba89eb70-a74d-4bfa-9fec-44accc6d6b72",
                            TwoFactorEnabled = false,
                            UserName = "itsCado54"
                        },
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5s",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d89db5bf-c75d-45b3-b750-d2b3792269f0",
                            Email = "cado.54.soccer@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEBIy7y/jAIxoCcPSDq0LlvBUpsyUSP5ABxoCmdnfqRxQQ79uHLulzoOnZUgnpl+VKQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ec272254-3fd7-4729-a44b-77d5501add4d",
                            TwoFactorEnabled = false,
                            UserName = "Micheal.M"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PixelParadise.Models.CS2Messages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CS2Messages");
                });

            modelBuilder.Entity("PixelParadise.Models.ChessMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ChessMessages");
                });

            modelBuilder.Entity("PixelParadise.Models.CodMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CodMessages");
                });

            modelBuilder.Entity("PixelParadise.Models.DestinyMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserProfilesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserProfilesId");

                    b.ToTable("DestinyMessages");
                });

            modelBuilder.Entity("PixelParadise.Models.DirectMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("DirectMessages");
                });

            modelBuilder.Entity("PixelParadise.Models.EFTMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserProfilesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserProfilesId");

                    b.ToTable("EFTMessages");
                });

            modelBuilder.Entity("PixelParadise.Models.EldenRingMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserProfilesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserProfilesId");

                    b.ToTable("EldenRingMessages");
                });

            modelBuilder.Entity("PixelParadise.Models.FinalsMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FinalsMessages");
                });

            modelBuilder.Entity("PixelParadise.Models.FortniteMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FortniteMessages");
                });

            modelBuilder.Entity("PixelParadise.Models.GTAMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserProfilesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserProfilesId");

                    b.ToTable("GTAMessages");
                });

            modelBuilder.Entity("PixelParadise.Models.HellDiversMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserProfilesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserProfilesId");

                    b.ToTable("HellDiversMessages");
                });

            modelBuilder.Entity("PixelParadise.Models.LeagueMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserProfilesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserProfilesId");

                    b.ToTable("LeagueMessages");
                });

            modelBuilder.Entity("PixelParadise.Models.Messages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("PixelParadise.Models.MinecraftMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserProfilesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserProfilesId");

                    b.ToTable("MinecraftMessages");
                });

            modelBuilder.Entity("PixelParadise.Models.PalWorldMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserProfilesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserProfilesId");

                    b.ToTable("PalWorldMessages");
                });

            modelBuilder.Entity("PixelParadise.Models.RSixMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RSixMessages");
                });

            modelBuilder.Entity("PixelParadise.Models.RobloxMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserProfilesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserProfilesId");

                    b.ToTable("RobloxMessages");
                });

            modelBuilder.Entity("PixelParadise.Models.RustMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserProfilesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserProfilesId");

                    b.ToTable("RustMessages");
                });

            modelBuilder.Entity("PixelParadise.Models.StarCraftMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("StarCraftMessages");
                });

            modelBuilder.Entity("PixelParadise.Models.TerrariaMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserProfilesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserProfilesId");

                    b.ToTable("TerrariaMessages");
                });

            modelBuilder.Entity("PixelParadise.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "412 Beamon Drive",
                            FirstName = "Caden",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Mildenhall"
                        },
                        new
                        {
                            Id = 2,
                            Address = "412 Beamon Drive",
                            FirstName = "Michael",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5s",
                            LastName = "Mildenhall"
                        });
                });

            modelBuilder.Entity("PixelParadise.Models.ValorantMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ValorantMessages");
                });

            modelBuilder.Entity("Friends", b =>
                {
                    b.HasOne("PixelParadise.Models.UserProfile", "Users")
                        .WithMany("Friend")
                        .HasForeignKey("FriendsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PixelParadise.Models.CS2Messages", b =>
                {
                    b.HasOne("PixelParadise.Models.UserProfile", "UserProfiles")
                        .WithMany("CS2Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("PixelParadise.Models.ChessMessages", b =>
                {
                    b.HasOne("PixelParadise.Models.UserProfile", "UserProfiles")
                        .WithMany("ChessMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("PixelParadise.Models.CodMessages", b =>
                {
                    b.HasOne("PixelParadise.Models.UserProfile", "UserProfiles")
                        .WithMany("CodMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("PixelParadise.Models.DestinyMessages", b =>
                {
                    b.HasOne("PixelParadise.Models.UserProfile", "UserProfiles")
                        .WithMany("DestinyMessages")
                        .HasForeignKey("UserProfilesId");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("PixelParadise.Models.DirectMessages", b =>
                {
                    b.HasOne("PixelParadise.Models.UserProfile", "UserProfile")
                        .WithMany("DirectMessages")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("PixelParadise.Models.EFTMessages", b =>
                {
                    b.HasOne("PixelParadise.Models.UserProfile", "UserProfiles")
                        .WithMany("EFTMessages")
                        .HasForeignKey("UserProfilesId");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("PixelParadise.Models.EldenRingMessages", b =>
                {
                    b.HasOne("PixelParadise.Models.UserProfile", "UserProfiles")
                        .WithMany("EldenRingMessages")
                        .HasForeignKey("UserProfilesId");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("PixelParadise.Models.FinalsMessages", b =>
                {
                    b.HasOne("PixelParadise.Models.UserProfile", "UserProfiles")
                        .WithMany("FinalsMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("PixelParadise.Models.FortniteMessages", b =>
                {
                    b.HasOne("PixelParadise.Models.UserProfile", "UserProfiles")
                        .WithMany("FortniteMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("PixelParadise.Models.GTAMessages", b =>
                {
                    b.HasOne("PixelParadise.Models.UserProfile", "UserProfiles")
                        .WithMany("GTAMessages")
                        .HasForeignKey("UserProfilesId");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("PixelParadise.Models.HellDiversMessages", b =>
                {
                    b.HasOne("PixelParadise.Models.UserProfile", "UserProfiles")
                        .WithMany("HellDiversMessages")
                        .HasForeignKey("UserProfilesId");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("PixelParadise.Models.LeagueMessages", b =>
                {
                    b.HasOne("PixelParadise.Models.UserProfile", "UserProfiles")
                        .WithMany("LeagueMessages")
                        .HasForeignKey("UserProfilesId");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("PixelParadise.Models.Messages", b =>
                {
                    b.HasOne("PixelParadise.Models.UserProfile", "UserProfiles")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("PixelParadise.Models.MinecraftMessages", b =>
                {
                    b.HasOne("PixelParadise.Models.UserProfile", "UserProfiles")
                        .WithMany("MinecraftMessages")
                        .HasForeignKey("UserProfilesId");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("PixelParadise.Models.PalWorldMessages", b =>
                {
                    b.HasOne("PixelParadise.Models.UserProfile", "UserProfiles")
                        .WithMany("PalWorldMessages")
                        .HasForeignKey("UserProfilesId");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("PixelParadise.Models.RSixMessages", b =>
                {
                    b.HasOne("PixelParadise.Models.UserProfile", "UserProfiles")
                        .WithMany("RSixMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("PixelParadise.Models.RobloxMessages", b =>
                {
                    b.HasOne("PixelParadise.Models.UserProfile", "UserProfiles")
                        .WithMany("RobloxMessages")
                        .HasForeignKey("UserProfilesId");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("PixelParadise.Models.RustMessages", b =>
                {
                    b.HasOne("PixelParadise.Models.UserProfile", "UserProfiles")
                        .WithMany("RustMessages")
                        .HasForeignKey("UserProfilesId");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("PixelParadise.Models.StarCraftMessages", b =>
                {
                    b.HasOne("PixelParadise.Models.UserProfile", "UserProfiles")
                        .WithMany("StarCraftMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("PixelParadise.Models.TerrariaMessages", b =>
                {
                    b.HasOne("PixelParadise.Models.UserProfile", "UserProfiles")
                        .WithMany("TerrariaMessages")
                        .HasForeignKey("UserProfilesId");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("PixelParadise.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("PixelParadise.Models.ValorantMessages", b =>
                {
                    b.HasOne("PixelParadise.Models.UserProfile", "UserProfiles")
                        .WithMany("ValorantMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("PixelParadise.Models.UserProfile", b =>
                {
                    b.Navigation("CS2Messages");

                    b.Navigation("ChessMessages");

                    b.Navigation("CodMessages");

                    b.Navigation("DestinyMessages");

                    b.Navigation("DirectMessages");

                    b.Navigation("EFTMessages");

                    b.Navigation("EldenRingMessages");

                    b.Navigation("FinalsMessages");

                    b.Navigation("FortniteMessages");

                    b.Navigation("Friend");

                    b.Navigation("GTAMessages");

                    b.Navigation("HellDiversMessages");

                    b.Navigation("LeagueMessages");

                    b.Navigation("Messages");

                    b.Navigation("MinecraftMessages");

                    b.Navigation("PalWorldMessages");

                    b.Navigation("RSixMessages");

                    b.Navigation("RobloxMessages");

                    b.Navigation("RustMessages");

                    b.Navigation("StarCraftMessages");

                    b.Navigation("TerrariaMessages");

                    b.Navigation("ValorantMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
